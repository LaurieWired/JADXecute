### Blank Template
```
import jadx.gui.ui.MainWindow;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		
		// Your code goes here!

		return jadxecuteOutput;
	}
}
```

### JadxWrapper example
```
import jadx.gui.ui.MainWindow;
import jadx.gui.JadxWrapper;
import jadx.api.JavaClass;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "Example output...";

		JadxWrapper wrapper = mainWindow.getWrapper();
		
		// Here's an example of using the wrapper object. Update here!
		for (JavaClass cls : wrapper.getClasses()) {
			jadxecuteOutput += cls.getName() + "\n";
		}

		return jadxecuteOutput;
	}
}
```

### Print all class names
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		
		// Add all strings to the jadxecute output to be printed
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		for (ClassNode cls : classes) {
			jadxecuteOutput += cls.getFullName() + "\n";
		}

		return jadxecuteOutput;
	}
}
```

### Print all method names
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.MethodNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		ClassNode selectedClassNode = null;
		String searchClassName = "exampleClassName"; // Update this
		
		// Add all strings to the jadxecute output to be printed
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		for (ClassNode cls : classes) {
			if (cls.getFullName().contains(searchClassName)) {
				jadxecuteOutput += "Found class: " + cls.getFullName() + "\n";
				selectedClassNode = cls;
			}
		}
		
		if (selectedClassNode != null) {
			jadxecuteOutput += "Methods:\n";
			
			// Print all methods in the selected class
			for (MethodNode method : selectedClassNode.getMethods()) {
				jadxecuteOutput += method.getAlias() + "\n"; // Use the alias since this includes user updates
			}
		} else {
			jadxecuteOutput += "Could not find class " + searchClassName;
		}

		return jadxecuteOutput;
	}
}
```

### Print all field names
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.FieldNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		ClassNode selectedClassNode = null;
		String searchClassName = "exampleClassName"; // Update this
		
		// Add all strings to the jadxecute output to be printed
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		for (ClassNode cls : classes) {
			if (cls.getFullName().contains(searchClassName)) {
				jadxecuteOutput += "Found class: " + cls.getFullName() + "\n";
				selectedClassNode = cls;
			}
		}
		
		if (selectedClassNode != null) {
			jadxecuteOutput += "Fields:\n";
			
			// Print all field in the selected class
			for (FieldNode field : selectedClassNode.getFields()) {
				jadxecuteOutput += field.getAlias() + "\n"; // Use the alias since this includes user updates
			}
		} else {
			jadxecuteOutput += "Could not find class " + searchClassName;
		}

		return jadxecuteOutput;
	}
}
```

### Print classes inheriting from class
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;
import jadx.core.dex.instructions.args.ArgType;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		String searchClassName = "IntentService"; // Update this
		ArgType superClassType = null;
		
		// Add all strings to the jadxecute output to be printed
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		
		jadxecuteOutput += "Classes extending " + searchClassName + ":\n";
		
		for (ClassNode cls : classes) {		
			superClassType = cls.getSuperClass();
			
			if (superClassType != null && superClassType.toString().contains(searchClassName)) {
				jadxecuteOutput += cls.getFullName() + "\n";
			}
		}

		return jadxecuteOutput;
	}
}
```

### Print classes containing substring
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		String searchClassName = "exampleClassName"; // Update this
		
		// Loop through all classes and add desired name to return output
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		for (ClassNode cls : classes) {

			// Example: finds all user-renamed classes renamed like "mw_MyClassA"
			if (cls.getFullName().contains(searchClassName)) {
				jadxecuteOutput += cls.getFullName() + "\n";
			}
		}

		return jadxecuteOutput;
	}
}
```

### Rename a class
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;
import jadx.gui.treemodel.JClass;
import jadx.api.JavaClass;
import jadx.gui.plugins.jadxecute.RenameObjectHelper;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		String searchClassName = "exampleClassName"; // Update this
		
		// Find desired class
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		for (ClassNode cls : classes) {
			if (cls.getFullName().contains(searchClassName)) {
				RenameObjectHelper renameObjectHelper = new RenameObjectHelper();
				JClass jclass = new JClass(cls.getJavaNode());

				// Rename found class to desired name
				jadxecuteOutput += renameObjectHelper.renameObject(mainWindow, jclass, "newClassName");
				
				// Optionally return here or you could add functionality to change all 
				//	matched objects to different names and return out of the loop
				return jadxecuteOutput;
			}
		}

		return jadxecuteOutput;
	}
}
```

### Print Java code in a class
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;
import jadx.gui.treemodel.JClass;
import jadx.api.JavaClass;
import jadx.gui.plugins.jadxecute.RenameObjectHelper;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		String searchClassName = "exampleClassName"; // Update this
		
		// Find desired class
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		for (ClassNode cls : classes) {
			if (cls.getFullName().contains(searchClassName)) {
				RenameObjectHelper renameObjectHelper = new RenameObjectHelper();
				
				jadxecuteOutput += "Found class " + searchClassName + ":\n\n";
				jadxecuteOutput += cls.getJavaNode().getCodeInfo().toString();
				
				return jadxecuteOutput;
			}
		}

		return jadxecuteOutput;
	}
}
```

### Insert a new instruction comment
```
import jadx.gui.ui.MainWindow;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.MethodNode;
import jadx.core.dex.nodes.RootNode;
import java.util.List;
import jadx.gui.plugins.jadxecute.AddCommentHelper;

public class UserCodeClass {
	public static String userCodeMain(MainWindow mainWindow) {
		String jadxecuteOutput = "";
		ClassNode selectedClassNode = null;
		MethodNode selectedMethodNode = null;
		String searchClassName = "exampleClassName"; // Update this
		String searchMethodName = "exampleMethodName"; // Update this
		String commentToAdd = "This is a new comment!"; // Update this
		int smaliInstructionIndex = 0; // Update this
		
		// Add all strings to the jadxecute output to be printed
		RootNode root = mainWindow.getWrapper().getDecompiler().getRoot();
		List<ClassNode> classes = root.getClasses();
		for (ClassNode cls : classes) {
			if (cls.getFullName().contains(searchClassName)) {
				jadxecuteOutput += "Found class: " + cls.getFullName() + "\n";
				selectedClassNode = cls;
			}
		}
		
		if (selectedClassNode != null) {
			for (MethodNode method : selectedClassNode.getMethods()) {
				if (method.getAlias().contains(searchMethodName)) {
					jadxecuteOutput += "Found method: " + method.getAlias() + "\n";
					selectedMethodNode = method;
				}
			}
			
			// Add the comment if the method was found
			if (selectedMethodNode != null) {
				AddCommentHelper addCommentHelper = new AddCommentHelper(mainWindow, selectedMethodNode.getJavaNode());
				jadxecuteOutput += addCommentHelper.addInstructionComment(commentToAdd, smaliInstructionIndex);
			}
			
		} else {
			jadxecuteOutput += "Could not find class " + searchClassName;
		}

		return jadxecuteOutput;
	}
}

```

